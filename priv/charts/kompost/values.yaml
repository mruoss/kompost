# Default values for kompost.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- The number of pods to run
replicaCount: 1

# -- The number of revisions to keep in history
revisionHistoryLimit: 10

image:
  # -- Kompost container image repository
  repository: ghcr.io/mruoss/kompost
  # -- imagePullPolicy applied to the containers
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""

kompos:
  postgres: 
    # -- Install CRDS for and run postgres kompo
    enabled: true
  temporal: 
    # -- Install CRDS for and run temporal kompo
    enabled: true

# -- Secrets with credentials to pull images from a private registry
imagePullSecrets: []
# -- Provide a name in place of `kompost`
nameOverride: kompost
# -- String to fully override `"kompost.fullname"`
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # -- If not set and create is true, a name is generated using the fullname template
  name: ""

webhook:
  certManager:
    # -- Enabling cert-manager support will disable the built in secret creation and
    # switch to using cert-manager (installed separately) to automatically issue
    # and renew the webhook certificate. This chart does not install
    # cert-manager for you, See https://cert-manager.io/docs/
    enabled: false
    
    # -- Automatically add the cert-manager.io/inject-ca-from annotation to the
    # webhooks and CRDs. As long as you have the cert-manager CA Injector
    # enabled, this will automatically setup your webhook's CA to the one used
    # by cert-manager. See https://cert-manager.io/docs/concepts/ca-injector
    addInjectorAnnotations: true
    
    cert:
      # -- Create a certificate resource within this chart. See
      # https://cert-manager.io/docs/usage/certificate/
      create: true

      # -- For the Certificate created by this chart, setup the issuer. See
      # https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.IssuerSpec
      issuerRef:
        group: cert-manager.io
        kind: "Issuer"
        name: "my-issuer"

      # -- Set the requested duration (i.e. lifetime) of the Certificate. See
      # https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificateSpec
      duration: ""

      # -- How long before the currently issued certificateâ€™s expiry
      # cert-manager should renew the certificate. See
      # https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificateSpec
      # Note that renewBefore should be greater than .webhook.lookaheadInterval
      # since the webhook will check this far in advance that the certificate is
      # valid.
      renewBefore: ""

      # -- Add extra annotations to the Certificate resource.
      annotations: {}

podAnnotations: {}

podSecurityContext: 
  runAsNonRoot: true
  runAsUser: 1001

containerSecurityContext: 
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001

# No endpoints other than admission webhooks at the moment
# ingress:
#   enabled: false
#   className: ""
#   annotations: {}
#     # kubernetes.io/ingress.class: nginx
#     # kubernetes.io/tls-acme: "true"
#   hosts:
#     - host: chart-example.local
#       paths:
#         - path: /
#           pathType: ImplementationSpecific
#   tls: []
#   #  - secretName: chart-example-tls
#   #    hosts:
#   #      - chart-example.local

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
