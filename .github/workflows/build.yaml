name: Build and Publish
on:
  workflow_dispatch:
  push:
    tags: [v*]
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write

env:
  MIX_ENV: prod
  KUBECONFIG: /home/runner/.kube/config

jobs:
  build_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - name: Parse .tool-versions
        id: versions
        run: |
          while IFS= read -r line; do
            NAME="$(echo $line | cut -d' ' -f1)"
            VALUE=$(echo $line | cut -d' ' -f2-)

            echo "$NAME=$VALUE" >> $GITHUB_OUTPUT
          done < .tool-versions
      - name: Build Matrix from hexpm Docker Image Tags
        id: build-matrix
        run: |
          TOKEN=$(curl --request POST \
            --url https://registry.hub.docker.com/v2/users/login \
            --header 'Content-Type: application/json' \
            --data '{
              "username": "${{ secrets.DOCKERHUB_USERNAME }}",
              "password": "${{ secrets.DOCKERHUB_TOKEN }}"
            }' \
            | jq -r .token)

          ERLANG_SLIM=$(curl --request GET \
            --url "https://registry.hub.docker.com/v2/namespaces/hexpm/repositories/erlang/tags?name=${{ steps.versions.outputs.erlang }}-debian-bullseye-%25-slim&page_size=25&ordering=name" \
            --header "Authorization: Bearer ${TOKEN}" \
            | jq -r ".results[0].name")

          ERLANG_DEBIAN=${ERLANG_SLIM%-slim}

          ERLANG_ALPINE=$(curl --request GET \
            --url "https://registry.hub.docker.com/v2/namespaces/hexpm/repositories/erlang/tags?name=${{ steps.versions.outputs.erlang }}-alpine&page_size=25&ordering=name" \
            --header "Authorization: Bearer ${TOKEN}" \
            | jq -r ".results[0].name")


          ELIXIR_SLIM=${{ steps.versions.outputs.elixir }}-erlang-${ERLANG_SLIM}
          ELIXIR_DEBIAN=${{ steps.versions.outputs.elixir }}-erlang-${ERLANG_DEBIAN}
          ELIXIR_ALPINE=${{ steps.versions.outputs.elixir }}-erlang-${ERLANG_ALPINE}

          echo "matrix={\"include\":[{\"erlang_image\":\"hexpm/erlang:${ERLANG_DEBIAN}\",\"elixir_image\":\"hexpm/elixir:${ELIXIR_DEBIAN}\",\"dest\":\"\"},{\"erlang_image\":\"hexpm/erlang:${ERLANG_SLIM}\",\"elixir_image\":\"hexpm/elixir:${ELIXIR_SLIM}\",\"dest\":\"-slim\"},{\"erlang_image\":\"hexpm/erlang:${ERLANG_ALPINE}\",\"elixir_image\":\"hexpm/elixir:${ELIXIR_ALPINE}\",\"dest\":\"-alpine\"}]}" >> $GITHUB_OUTPUT

  build_container_image:
    runs-on: ubuntu-latest
    needs: build_matrix
    strategy:
      matrix: ${{ fromJSON(needs.build_matrix.outputs.matrix) }}
    permissions:
      packages: write
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Prepare variables
        id: prepare_vars
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG=${{ github.ref_name }}
          else
            TAG=dev
          fi

          echo "cache_src=ghcr.io/mruoss/kompost:dev${{ matrix.dest }}" >> $GITHUB_OUTPUT
          echo "e2e_image=ghcr.io/mruoss/kompost:e2e${{ matrix.dest }}" >> $GITHUB_OUTPUT
          echo "dest_image=ghcr.io/mruoss/kompost:${TAG#v}${{ matrix.dest }}" >> $GITHUB_OUTPUT

      - name: Build E2E Image
        uses: docker/build-push-action@v4
        id: build_and_push_e2e
        with:
          push: false
          load: true
          tags: ${{ steps.prepare_vars.outputs.e2e_image }}
          cache-from: type=registry,ref=${{ steps.prepare_vars.outputs.cache_src }}
          cache-to: type=inline
          build-args: |
            ERLANG_IMAGE=${{ matrix.erlang_image }}
            ELIXIR_IMAGE=${{ matrix.elixir_image }}

      - uses: engineerd/setup-kind@v0.5.0
        id: kind
        with:
          version: v0.20.0
          name: kompost-test
          config: ./test/integration/kind-cluster.yml

      - name: Setup elixir
        id: beam
        uses: erlef/setup-beam@v1
        with:
          version-file: .tool-versions
          version-type: strict
          install-rebar: true
          install-hex: true

      - name: Retrieve Deps to Cache
        uses: actions/cache/restore@v3
        id: deps-folder-cache-test-restore
        with:
          path: deps
          key: ${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-deps-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Retrieve Build Folder from Cache
        uses: actions/cache/restore@v3
        id: build-folder-cache-restore
        with:
          path: _build
          key: ${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-build-${{github.workflow}}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Compile app
        run: |
          mix deps.get
          MIX_ENV=test mix compile
          MIX_ENV=prod mix compile

      - name: Save Deps to Cache
        uses: actions/cache/save@v3
        id: deps-folder-cache-test-save
        with:
          path: deps
          key: ${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-deps-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Save Build Folder to Cache
        uses: actions/cache/save@v3
        id: build-folder-cache-save
        with:
          path: _build
          key: ${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-build-${{github.workflow}}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Run e2e tests
        id: run-e2e
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          kubectl create ns kompost
          MIX_ENV=test mix kompost.gen.manifest
          kind load docker-image --name kompost-test "${{ steps.prepare_vars.outputs.e2e_image }}"
          MIX_ENV=test mix kompost.gen.periphery
          kubectl config use-context kind-kompost-test
          MIX_ENV=prod mix kompost.gen.manifest --image "${{ steps.prepare_vars.outputs.e2e_image }}" --out - | kubectl apply -f -

          echo "Waiting for kompost pods to get ready"
          kubectl wait pods -n kompost -l k8s-app=kompost --for condition=Ready --timeout=300s

          MIX_ENV=test POSTGRES_HOST=postgres.postgres.svc.cluster.local TEMPORAL_HOST=temporal.temporal.svc.cluster.local mix coveralls.github --include integration --include e2e --no-start

      - name: Logs
        if: steps.run-e2e.outcome == 'failure' && failure()
        run: kubectl logs -n kompost -l k8s-app=kompost --since=1h

      - name: Build and push
        uses: docker/build-push-action@v4
        id: build_and_push
        with:
          push: ${{ github.ref_type == 'tag' }}
          tags: "${{ steps.prepare_vars.outputs.dest_image }},${{ steps.prepare_vars.outputs.cache_src }}"
          platforms: linux/amd64,linux/arm64/v8,linux/arm
          cache-from: type=registry,ref=${{ steps.prepare_vars.outputs.cache_src }}
          cache-to: type=inline
          build-args: |
            ERLANG_IMAGE=${{ matrix.erlang_image }}
            ELIXIR_IMAGE=${{ matrix.elixir_image }}

      - uses: cloudposse/github-action-matrix-outputs-write@main
        id: out
        with:
          matrix-step-name: ${{ github.job }}
          matrix-key: ${{ matrix.elixir_image }}
          outputs: |-
            dest_image: ${{ steps.prepare_vars.outputs.dest_image }}@${{ steps.build_and_push.outputs.digest }}

  create_gh_release:
    runs-on: ubuntu-latest
    needs: [build_container_image]
    if: github.ref_type == 'tag'
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3

      - name: Prepare release notes
        run: |
          csplit -s CHANGELOG.md "/^## /" {1}
          cat xx01 > release_nots.md

      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ github.ref_name }}
          tag_name: ${{ github.ref }}
          body_path: release_nots.md
        env:
          GITHUB_TOKEN: ${{ github.token }}

  read_matrix_output:
    runs-on: ubuntu-latest
    needs: [build_container_image]
    if: github.ref_type == 'tag'
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@main
        id: read
        with:
          matrix-step-name: build_container_image

    outputs:
      result: "${{ steps.read.outputs.result }}"

  upload_manifests:
    runs-on: ubuntu-latest
    needs: [build_matrix, read_matrix_output, create_gh_release]
    strategy:
      matrix: ${{ fromJSON(needs.build_matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup elixir
        id: beam
        uses: erlef/setup-beam@v1
        with:
          version-file: .tool-versions
          version-type: strict
          install-rebar: true
          install-hex: true

      - name: Install Mix Dependencies
        run: mix deps.get

      - name: build manifest
        run: |
          MIX_ENV=prod mix kompost.gen.manifest --image "${{ fromJSON(needs.read_matrix_output.outputs.result).dest_image[matrix.elixir_image] }}" --namespace kompost -o manifest${{ matrix.dest }}.yaml

      - name: upload manifest as artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_gh_release.outputs.upload_url }}
          asset_path: ./manifest${{ steps.prepare_vars.outputs.dest }}.yaml
          asset_name: manifest${{ steps.prepare_vars.outputs.dest }}.yaml
          asset_content_type: application/yaml
