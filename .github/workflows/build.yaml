name: Build and Publish
on:
  workflow_dispatch:
  push:
    tags: [v*]
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write

env:
  MIX_ENV: prod
  KUBECONFIG: /home/runner/.kube/config
  ELIXIR_IMAGE: hexpm/elixir:1.15.0-erlang-26.0.1
  ERLANG_IMAGE: hexpm/erlang:26.0.1

jobs:
  build_container_image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - 'SRC=-debian-bullseye-20230612 DEST=""'
          - "SRC=-debian-bullseye-20230612-slim DEST=-slim"
          - "SRC=-alpine-3.18.2 DEST=-alpine"
    permissions:
      packages: write
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Prepare variables
        id: prepare_vars
        run: |
          ${{ matrix.arch }}
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG=${{ github.ref_name }}
          else
            TAG=dev
          fi

          echo "cache_src=ghcr.io/mruoss/kompost:dev${DEST}" >> $GITHUB_OUTPUT
          echo "e2e_image=ghcr.io/mruoss/kompost:e2e${DEST}" >> $GITHUB_OUTPUT
          echo "dest_image=ghcr.io/mruoss/kompost:${TAG#v}${DEST}" >> $GITHUB_OUTPUT
          echo "src_image_erlang=${ERLANG_IMAGE}${SRC}" >> $GITHUB_OUTPUT
          echo "src_image_elixir=${ELIXIR_IMAGE}${SRC}" >> $GITHUB_OUTPUT

      - name: Build E2E Image
        uses: docker/build-push-action@v4
        id: build_and_push_e2e
        with:
          push: false
          load: true
          tags: ${{ steps.prepare_vars.outputs.e2e_image }}
          cache-from: type=registry,ref=${{ steps.prepare_vars.outputs.cache_src }}
          cache-to: type=inline
          build-args: |
            ERLANG_IMAGE=${{ steps.prepare_vars.outputs.src_image_erlang }}
            ELIXIR_IMAGE=${{ steps.prepare_vars.outputs.src_image_elixir }}

      - uses: engineerd/setup-kind@v0.5.0
        id: kind
        with:
          version: v0.20.0
          name: kompost-test
          config: ./test/integration/kind-cluster.yml

      - name: Setup elixir
        id: beam
        uses: erlef/setup-beam@v1
        with:
          version-file: .tool-versions
          version-type: strict
          install-rebar: true
          install-hex: true

      - name: Retrieve Deps Cache
        uses: actions/cache/restore@v3
        id: deps-folder-cache-test-restore
        with:
          path: deps
          key: ${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-deps-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Retrieve Test Build Cache
        uses: actions/cache/restore@v3
        id: build-folder-cache-test-restore
        with:
          path: _build/test
          key: ${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-build-test-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Retrieve Prod Build Cache
        uses: actions/cache/restore@v3
        id: build-folder-cache-prod-restore
        with:
          path: _build/prod
          key: ${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-build-prod-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Compile app
        run: |
          mix deps.get
          MIX_ENV=test mix compile
          MIX_ENV=prod mix compile

      - name: Save Deps Cache
        uses: actions/cache/save@v3
        id: deps-folder-cache-test-save
        with:
          path: deps
          key: ${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-deps-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Save Test Build Cache
        uses: actions/cache/save@v3
        id: build-folder-cache-test-save
        with:
          path: _build/test
          key: ${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-build-test-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Save Prod Build Cache
        uses: actions/cache/save@v3
        id: build-folder-cache-prod-save
        with:
          path: _build/prod
          key: ${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-build-prod-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Run e2e tests
        run: |
          kubectl create ns kompost
          MIX_ENV=test mix kompost.gen.manifest
          kind load docker-image --name kompost-test ${{ steps.prepare_vars.outputs.e2e_image }}
          MIX_ENV=test mix kompost.gen.periphery
          kubectl config use-context kind-kompost-test
          MIX_ENV=prod mix kompost.gen.manifest --image ${{ steps.prepare_vars.outputs.e2e_image }} --out - | kubectl apply -f -
          kubectl wait pods -n kompost -l k8s-app=kompost --for condition=Ready --timeout=300s

          MIX_ENV=test POSTGRES_HOST=postgres.postgres.svc.cluster.local TEMPORAL_HOST=temporal.temporal.svc.cluster.local mix coveralls.github --include integration --include e2e --no-start --cover

      - name: Build and push
        uses: docker/build-push-action@v4
        id: build_and_push
        with:
          push: ${{ github.ref_type == 'tag' }}
          tags: "${{ steps.prepare_vars.outputs.dest_image }},${{ steps.prepare_vars.outputs.e2e_image }}"
          platforms: linux/amd64,linux/arm64/v8,linux/arm
          cache-from: type=registry,ref=${{ steps.prepare_vars.outputs.cache_src }}
          cache-to: type=inline
          build-args: |
            ERLANG_IMAGE=${{ steps.prepare_vars.outputs.src_image_erlang }}
            ELIXIR_IMAGE=${{ steps.prepare_vars.outputs.src_image_elixir }}

      - uses: cloudposse/github-action-matrix-outputs-write@main
        id: out
        with:
          matrix-step-name: ${{ github.job }}
          matrix-key: ${{ matrix.arch }}
          outputs: |-
            dest_image: ${{ steps.prepare_vars.outputs.dest_image }}@${{ steps.build_and_push.outputs.digest }}

  create_gh_release:
    runs-on: ubuntu-latest
    needs: [build_container_image]
    if: github.ref_type == 'tag'
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3

      - name: Prepare release notes
        run: |
          csplit -s CHANGELOG.md "/^## /" {1}
          cat xx01 > release_nots.md

      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ github.ref_name }}
          tag_name: ${{ github.ref }}
          body_path: release_nots.md
        env:
          GITHUB_TOKEN: ${{ github.token }}

  read_matrix_output:
    runs-on: ubuntu-latest
    needs: [build_container_image]
    if: github.ref_type == 'tag'
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@main
        id: read
        with:
          matrix-step-name: build_container_image

    outputs:
      result: "${{ steps.read.outputs.result }}"

  upload_manifests:
    runs-on: ubuntu-latest
    needs: [read_matrix_output, create_gh_release]
    strategy:
      matrix:
        arch:
          - 'SRC=-debian-bullseye-20230522 DEST=""'
          - "SRC=-debian-bullseye-20230522-slim DEST=-slim"
          - "SRC=-alpine-3.18.0 DEST=-alpine"
    steps:
      - uses: actions/checkout@v3

      - name: Setup elixir
        id: beam
        uses: erlef/setup-beam@v1
        with:
          version-file: .tool-versions
          version-type: strict
          install-rebar: true
          install-hex: true

      - name: Install Mix Dependencies
        run: mix deps.get

      - name: Prepare variables
        id: prepare_vars
        run: |
          ${{ matrix.arch }}
          echo "dest=$DEST" >> $GITHUB_OUTPUT

      - name: build manifest
        run: |
          MIX_ENV=prod mix kompost.gen.manifest --image "${{ fromJson(needs.read_matrix_output.outputs.result).dest_image[matrix.arch] }}" --namespace kompost -o manifest${{ steps.prepare_vars.outputs.dest }}.yaml

      - name: upload manifest as artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_gh_release.outputs.upload_url }}
          asset_path: ./manifest${{ steps.prepare_vars.outputs.dest }}.yaml
          asset_name: manifest${{ steps.prepare_vars.outputs.dest }}.yaml
          asset_content_type: application/yaml
